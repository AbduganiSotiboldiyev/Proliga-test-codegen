// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 829HK5jNiwv3ZTz1XRkY4w
// Component: _o8D3m40ZzQb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: v6dPoFYnJWjC/component
import Clubs from "../../Clubs"; // plasmic-import: iaQjg7bA9bcb/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import SoccerPlaceMens from "../../SoccerPlaceMens"; // plasmic-import: CavoemTS6wG5/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 829HK5jNiwv3ZTz1XRkY4w/projectcss
import sty from "./PlasmicIdealXl.module.css"; // plasmic-import: _o8D3m40ZzQb/css

createPlasmicElementProxy;

export type PlasmicIdealXl__VariantMembers = {};
export type PlasmicIdealXl__VariantsArgs = {};
type VariantPropType = keyof PlasmicIdealXl__VariantsArgs;
export const PlasmicIdealXl__VariantProps = new Array<VariantPropType>();

export type PlasmicIdealXl__ArgsType = {};
type ArgPropType = keyof PlasmicIdealXl__ArgsType;
export const PlasmicIdealXl__ArgProps = new Array<ArgPropType>();

export type PlasmicIdealXl__OverridesType = {
  idealXl?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  clubs?: Flex__<typeof Clubs>;
  h4?: Flex__<"h4">;
  h5?: Flex__<"h5">;
  soccerPlaceMens?: Flex__<typeof SoccerPlaceMens>;
  h6?: Flex__<"h6">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
};

export interface DefaultIdealXlProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIdealXl__RenderFunc(props: {
  variants: PlasmicIdealXl__VariantsArgs;
  args: PlasmicIdealXl__ArgsType;
  overrides: PlasmicIdealXl__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"idealXl"}
          data-plasmic-override={overrides.idealXl}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.idealXl
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Clubs
            data-plasmic-name={"clubs"}
            data-plasmic-override={overrides.clubs}
            className={classNames("__wab_instance", sty.clubs)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__wHM1)}>
            <div className={classNames(projectcss.all, sty.freeBox___8PqlY)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sfG1F
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"Ideal XI"}
                        </span>
                      </React.Fragment>
                    </h4>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tUXnF)}>
            <div className={classNames(projectcss.all, sty.freeBox__nKxfX)}>
              <div className={classNames(projectcss.all, sty.freeBox__qtbox)}>
                <AntdDropdown
                  className={classNames("__wab_instance", sty.dropdown__eix1K)}
                  dropdownMenuScopeClassName={
                    sty["dropdown__eix1K__dropdownMenu"]
                  }
                  menuItems={() => (
                    <React.Fragment>
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__pwNyr
                        )}
                        key={"menu-item-1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___14IQg
                          )}
                        >
                          {"Menu item"}
                        </div>
                      </AntdMenuItem>
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__v6Xsm
                        )}
                        key={"menu-item-2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__alY0E
                          )}
                        >
                          {"Menu item"}
                        </div>
                      </AntdMenuItem>
                    </React.Fragment>
                  )}
                  menuItemsJson={[
                    { type: "item", value: "action1", label: "Action 1" },
                    { type: "item", value: "action2", label: "Action 2" }
                  ]}
                >
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__pf28)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mLwSl
                      )}
                    >
                      {"Dropdown"}
                    </div>
                  </AntdButton>
                </AntdDropdown>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__oEhdl)}>
              <div className={classNames(projectcss.all, sty.freeBox__nfli4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lwcah
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h5
                        data-plasmic-name={"h5"}
                        data-plasmic-override={overrides.h5}
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-jgohepLVeKvh)" }}
                          >
                            {"Ideal XI of the fixture Fixture 1"}
                          </span>
                        </React.Fragment>
                      </h5>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__r9FNe)}>
              <div className={classNames(projectcss.all, sty.freeBox__yq8Bn)}>
                <SoccerPlaceMens
                  data-plasmic-name={"soccerPlaceMens"}
                  data-plasmic-override={overrides.soccerPlaceMens}
                  className={classNames("__wab_instance", sty.soccerPlaceMens)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kpg3F)}>
                <div className={classNames(projectcss.all, sty.freeBox__sZtk7)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qGyT)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s5NUj
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h6
                            data-plasmic-name={"h6"}
                            data-plasmic-override={overrides.h6}
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-jgohepLVeKvh)" }}
                              >
                                {"Players"}
                              </span>
                            </React.Fragment>
                          </h6>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ea9W7)}
                  >
                    <AntdDropdown
                      className={classNames(
                        "__wab_instance",
                        sty.dropdown__lIjbn
                      )}
                      dropdownMenuScopeClassName={
                        sty["dropdown__lIjbn__dropdownMenu"]
                      }
                      menuItems={() => (
                        <React.Fragment>
                          <AntdMenuItem
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem___19OZm
                            )}
                            key={"menu-item-1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oDcWq
                              )}
                            >
                              {"Menu item"}
                            </div>
                          </AntdMenuItem>
                          <AntdMenuItem
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem__seBu
                            )}
                            key={"menu-item-2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bFrVl
                              )}
                            >
                              {"Menu item"}
                            </div>
                          </AntdMenuItem>
                        </React.Fragment>
                      )}
                      menuItemsJson={[
                        { type: "item", value: "action1", label: "Action 1" },
                        { type: "item", value: "action2", label: "Action 2" }
                      ]}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__iVkdZ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4LWoh
                          )}
                        >
                          {"Dropdown"}
                        </div>
                      </AntdButton>
                    </AntdDropdown>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__b2Zt2)}>
                  <CmsQueryRepeater
                    data-plasmic-name={"cmsDataFetcher"}
                    data-plasmic-override={overrides.cmsDataFetcher}
                    className={classNames("__wab_instance", sty.cmsDataFetcher)}
                    desc={false}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5Q3Sm
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    fields={[
                      "image",
                      "clubLogo",
                      "position",
                      "name",
                      "cost",
                      "point",
                      "_id"
                    ]}
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__s276E
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    noAutoRepeat={false}
                    noLayout={false}
                    table={"idealPlayers"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uTf04
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vYxd7
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField___4UE1L
                              )}
                              field={"image"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__gyY7C
                              )}
                              field={"clubLogo"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField___7Hy7W
                              )}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__n7AbK
                              )}
                              field={"name"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dkP8U
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__sJAm
                              )}
                              field={"cost"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gxOw
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__voyhK
                              )}
                              field={"point"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </div>
                        </div>
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  idealXl: [
    "idealXl",
    "navbar",
    "clubs",
    "h4",
    "h5",
    "soccerPlaceMens",
    "h6",
    "cmsDataFetcher"
  ],
  navbar: ["navbar"],
  clubs: ["clubs"],
  h4: ["h4"],
  h5: ["h5"],
  soccerPlaceMens: ["soccerPlaceMens"],
  h6: ["h6"],
  cmsDataFetcher: ["cmsDataFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  idealXl: "div";
  navbar: typeof Navbar;
  clubs: typeof Clubs;
  h4: "h4";
  h5: "h5";
  soccerPlaceMens: typeof SoccerPlaceMens;
  h6: "h6";
  cmsDataFetcher: typeof CmsQueryRepeater;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIdealXl__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIdealXl__VariantsArgs;
    args?: PlasmicIdealXl__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIdealXl__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIdealXl__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIdealXl__ArgProps,
          internalVariantPropNames: PlasmicIdealXl__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIdealXl__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "idealXl") {
    func.displayName = "PlasmicIdealXl";
  } else {
    func.displayName = `PlasmicIdealXl.${nodeName}`;
  }
  return func;
}

export const PlasmicIdealXl = Object.assign(
  // Top-level PlasmicIdealXl renders the root element
  makeNodeComponent("idealXl"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    clubs: makeNodeComponent("clubs"),
    h4: makeNodeComponent("h4"),
    h5: makeNodeComponent("h5"),
    soccerPlaceMens: makeNodeComponent("soccerPlaceMens"),
    h6: makeNodeComponent("h6"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),

    // Metadata about props expected for PlasmicIdealXl
    internalVariantProps: PlasmicIdealXl__VariantProps,
    internalArgProps: PlasmicIdealXl__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIdealXl;
/* prettier-ignore-end */
